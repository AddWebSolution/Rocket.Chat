diff --git a/apps/meteor/app/lib/server/functions/addOAuthService.ts b/apps/meteor/app/lib/server/functions/addOAuthService.ts
index eb28c5a7e3..9d1ebdd904 100644
--- a/apps/meteor/app/lib/server/functions/addOAuthService.ts
+++ b/apps/meteor/app/lib/server/functions/addOAuthService.ts
@@ -170,7 +170,7 @@ export async function addOAuthService(name: string, values: { [k: string]: strin
 		group: 'OAuth',
 		section: `Custom OAuth: ${name}`,
 		i18nLabel: 'Accounts_OAuth_Custom_Roles_Claim',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: 'roles',
 		modules: ['oauth-enterprise'],
 	});
@@ -179,7 +179,7 @@ export async function addOAuthService(name: string, values: { [k: string]: strin
 		group: 'OAuth',
 		section: `Custom OAuth: ${name}`,
 		i18nLabel: 'Accounts_OAuth_Custom_Groups_Claim',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: 'groups',
 		modules: ['oauth-enterprise'],
 	});
@@ -196,7 +196,7 @@ export async function addOAuthService(name: string, values: { [k: string]: strin
 		group: 'OAuth',
 		section: `Custom OAuth: ${name}`,
 		i18nLabel: 'Accounts_OAuth_Custom_Map_Channels',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: false,
 		modules: ['oauth-enterprise'],
 	});
@@ -205,7 +205,7 @@ export async function addOAuthService(name: string, values: { [k: string]: strin
 		group: 'OAuth',
 		section: `Custom OAuth: ${name}`,
 		i18nLabel: 'Accounts_OAuth_Custom_Merge_Roles',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: false,
 		modules: ['oauth-enterprise'],
 	});
@@ -215,7 +215,7 @@ export async function addOAuthService(name: string, values: { [k: string]: strin
 		section: `Custom OAuth: ${name}`,
 		i18nLabel: 'Accounts_OAuth_Custom_Roles_To_Sync',
 		i18nDescription: 'Accounts_OAuth_Custom_Roles_To_Sync_Description',
-		enterprise: true,
+		enterprise: false,
 		enableQuery: {
 			_id: `Accounts_OAuth_Custom-${name}-merge_roles`,
 			value: true,
diff --git a/apps/meteor/client/views/admin/info/UsageCard.tsx b/apps/meteor/client/views/admin/info/UsageCard.tsx
index 7a3b2123e5..05823faba4 100644
--- a/apps/meteor/client/views/admin/info/UsageCard.tsx
+++ b/apps/meteor/client/views/admin/info/UsageCard.tsx
@@ -35,7 +35,8 @@ const UsageCard = ({ statistics, vertical }: UsageCardProps): ReactElement => {
 		router.push();
 	});
 
-	const canViewEngagement = useHasLicenseModule('engagement-dashboard');
+//	const canViewEngagement = useHasLicenseModule('engagement-dashboard');
+	const canViewEngagement = true;
 
 	return (
 		<Card data-qa-id='usage-card'>
diff --git a/apps/meteor/ee/app/canned-responses/server/settings.ts b/apps/meteor/ee/app/canned-responses/server/settings.ts
index 56eacee8c5..5e6b79c1f4 100644
--- a/apps/meteor/ee/app/canned-responses/server/settings.ts
+++ b/apps/meteor/ee/app/canned-responses/server/settings.ts
@@ -8,7 +8,7 @@ export const createSettings = async (): Promise<void> => {
 		section: 'Canned_Responses',
 		type: 'boolean',
 		public: true,
-		enterprise: true,
+		enterprise: false,
 		invalidValue: false,
 		modules: ['canned-responses'],
 		enableQuery: omnichannelEnabledQuery,
diff --git a/apps/meteor/ee/app/license/server/bundles.ts b/apps/meteor/ee/app/license/server/bundles.ts
index 70f9d7b5a6..668047946b 100644
--- a/apps/meteor/ee/app/license/server/bundles.ts
+++ b/apps/meteor/ee/app/license/server/bundles.ts
@@ -58,7 +58,7 @@ export function isBundle(moduleName: string): boolean {
 
 	const bundle = getBundleFromModule(moduleName);
 	if (!bundle) {
-		return false;
+		return true;
 	}
 
 	return true;
diff --git a/apps/meteor/ee/app/license/server/license.ts b/apps/meteor/ee/app/license/server/license.ts
index fe0b22a0ee..3431b34fcb 100644
--- a/apps/meteor/ee/app/license/server/license.ts
+++ b/apps/meteor/ee/app/license/server/license.ts
@@ -20,9 +20,9 @@ interface IValidLicense {
 	license: ILicense;
 }
 
-let maxGuestUsers = 0;
-let maxRoomsPerGuest = 0;
-let maxActiveUsers = 0;
+let maxGuestUsers = 1000000;
+let maxRoomsPerGuest = 10;
+let maxActiveUsers = 1000000;
 
 class LicenseClass {
 	private url: string | null = null;
@@ -36,8 +36,8 @@ class LicenseClass {
 	private modules = new Set<string>();
 
 	private appsConfig: NonNullable<ILicense['apps']> = {
-		maxPrivateApps: 3,
-		maxMarketplaceApps: 5,
+		maxPrivateApps: -1,
+		maxMarketplaceApps: -1,
 	};
 
 	private _validateExpiration(expiration: string): boolean {
@@ -142,6 +142,7 @@ class LicenseClass {
 
 	hasAnyValidLicense(): boolean {
 		return this.licenses.some((item) => item.valid);
+//		return true;
 	}
 
 	getLicenses(): IValidLicense[] {
@@ -317,7 +318,8 @@ export function setURL(url: string): void {
 }
 
 export function hasLicense(feature: string): boolean {
-	return License.hasModule(feature);
+//	return License.hasModule(feature);
+	return true;
 }
 
 export function isEnterprise(): boolean {
diff --git a/apps/meteor/ee/app/livechat-enterprise/server/settings.ts b/apps/meteor/ee/app/livechat-enterprise/server/settings.ts
index 0f21374ebf..339de149a4 100644
--- a/apps/meteor/ee/app/livechat-enterprise/server/settings.ts
+++ b/apps/meteor/ee/app/livechat-enterprise/server/settings.ts
@@ -16,7 +16,7 @@ export const createSettings = async (): Promise<void> => {
 			{ key: 'close', i18nLabel: 'Livechat_close_chat' },
 			{ key: 'on-hold', i18nLabel: 'Omnichannel_onHold_Chat' },
 		],
-		enterprise: true,
+		enterprise: false,
 		public: true,
 		invalidValue: 'none',
 		modules: ['livechat-enterprise'],
@@ -29,7 +29,7 @@ export const createSettings = async (): Promise<void> => {
 		section: 'Sessions',
 		i18nLabel: 'Livechat_abandoned_rooms_closed_custom_message',
 		enableQuery: [{ _id: 'Livechat_abandoned_rooms_action', value: 'close' }, omnichannelEnabledQuery],
-		enterprise: true,
+		enterprise: false,
 		invalidValue: '',
 		modules: ['livechat-enterprise'],
 	});
@@ -38,7 +38,7 @@ export const createSettings = async (): Promise<void> => {
 		type: 'boolean',
 		group: 'Omnichannel',
 		section: 'Routing',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: false,
 		modules: ['livechat-enterprise'],
 		enableQuery: omnichannelEnabledQuery,
@@ -60,7 +60,7 @@ export const createSettings = async (): Promise<void> => {
 				],
 				public: true,
 				i18nLabel: 'Livechat_business_hour_type',
-				enterprise: true,
+				enterprise: false,
 				invalidValue: 'Single',
 				modules: ['livechat-enterprise'],
 				enableQuery: [omnichannelEnabledQuery, businessHoursEnabled],
@@ -73,7 +73,7 @@ export const createSettings = async (): Promise<void> => {
 				group: 'Omnichannel',
 				section: 'Queue_management',
 				i18nLabel: 'Waiting_queue',
-				enterprise: true,
+				enterprise: false,
 				invalidValue: false,
 				modules: ['livechat-enterprise'],
 				enableQuery: omnichannelEnabledQuery,
@@ -86,7 +86,7 @@ export const createSettings = async (): Promise<void> => {
 				i18nLabel: 'Waiting_queue_message',
 				i18nDescription: 'Waiting_queue_message_description',
 				enableQuery: [{ _id: 'Livechat_waiting_queue', value: true }, omnichannelEnabledQuery],
-				enterprise: true,
+				enterprise: false,
 				invalidValue: '',
 				modules: ['livechat-enterprise'],
 			});
@@ -98,7 +98,7 @@ export const createSettings = async (): Promise<void> => {
 				i18nLabel: 'Max_number_of_chats_per_agent',
 				i18nDescription: 'Max_number_of_chats_per_agent_description',
 				enableQuery: [{ _id: 'Livechat_waiting_queue', value: true }, omnichannelEnabledQuery],
-				enterprise: true,
+				enterprise: false,
 				invalidValue: 0,
 				modules: ['livechat-enterprise'],
 			});
@@ -109,7 +109,7 @@ export const createSettings = async (): Promise<void> => {
 				section: 'Queue_management',
 				i18nLabel: 'Omnichannel_calculate_dispatch_service_queue_statistics',
 				enableQuery: [{ _id: 'Livechat_waiting_queue', value: true }, omnichannelEnabledQuery],
-				enterprise: true,
+				enterprise: false,
 				invalidValue: false,
 				modules: ['livechat-enterprise'],
 			});
@@ -121,7 +121,7 @@ export const createSettings = async (): Promise<void> => {
 				i18nLabel: 'Number_of_most_recent_chats_estimate_wait_time',
 				i18nDescription: 'Number_of_most_recent_chats_estimate_wait_time_description',
 				enableQuery: [{ _id: 'Livechat_waiting_queue', value: true }, omnichannelEnabledQuery],
-				enterprise: true,
+				enterprise: false,
 				invalidValue: 100,
 				modules: ['livechat-enterprise'],
 			});
@@ -133,7 +133,7 @@ export const createSettings = async (): Promise<void> => {
 				i18nLabel: 'Livechat_maximum_queue_wait_time',
 				enableQuery: omnichannelEnabledQuery,
 				i18nDescription: 'Livechat_maximum_queue_wait_time_description',
-				enterprise: true,
+				enterprise: false,
 				invalidValue: -1,
 				modules: ['livechat-enterprise'],
 			});
@@ -149,7 +149,7 @@ export const createSettings = async (): Promise<void> => {
 				section: 'Queue_management',
 				i18nLabel: 'Sorting_mechanism',
 				enableQuery: [omnichannelEnabledQuery],
-				enterprise: true,
+				enterprise: false,
 				public: true,
 				modules: ['livechat-enterprise'],
 				invalidValue: '',
@@ -161,7 +161,7 @@ export const createSettings = async (): Promise<void> => {
 		type: 'boolean',
 		group: 'Omnichannel',
 		section: 'Routing',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: false,
 		modules: ['livechat-enterprise'],
 		enableQuery: omnichannelEnabledQuery,
@@ -171,7 +171,7 @@ export const createSettings = async (): Promise<void> => {
 		type: 'int',
 		group: 'Omnichannel',
 		section: 'Sessions',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: 0,
 		modules: ['livechat-enterprise'],
 		enableQuery: omnichannelEnabledQuery,
@@ -182,7 +182,7 @@ export const createSettings = async (): Promise<void> => {
 		group: 'Omnichannel',
 		section: 'Sessions',
 		enableQuery: [{ _id: 'Livechat_auto_close_on_hold_chats_timeout', value: { $gte: 1 } }, omnichannelEnabledQuery],
-		enterprise: true,
+		enterprise: false,
 		invalidValue: '',
 		modules: ['livechat-enterprise'],
 	});
@@ -191,7 +191,7 @@ export const createSettings = async (): Promise<void> => {
 		type: 'boolean',
 		group: 'Omnichannel',
 		section: 'Sessions',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: false,
 		public: true,
 		modules: ['livechat-enterprise'],
@@ -203,7 +203,7 @@ export const createSettings = async (): Promise<void> => {
 		group: 'Omnichannel',
 		section: 'Sessions',
 		i18nDescription: 'Livechat_auto_transfer_chat_timeout_description',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: 0,
 		modules: ['livechat-enterprise'],
 		enableQuery: omnichannelEnabledQuery,
diff --git a/apps/meteor/ee/client/sidebar/footer/SidebarFooterWatermark.tsx b/apps/meteor/ee/client/sidebar/footer/SidebarFooterWatermark.tsx
index 8fc2bfa5c9..7c38cd39ef 100644
--- a/apps/meteor/ee/client/sidebar/footer/SidebarFooterWatermark.tsx
+++ b/apps/meteor/ee/client/sidebar/footer/SidebarFooterWatermark.tsx
@@ -14,16 +14,5 @@ export const SidebarFooterWatermark = (): ReactElement | null => {
 		return null;
 	}
 
-	return (
-		<Box pi={16} pbe={8}>
-			<Box is='a' href='https://rocket.chat/' target='_blank' rel='noopener noreferrer'>
-				<Box fontScale='micro' color='hint' pbe={4}>
-					{t('Powered_by_RocketChat')}
-				</Box>
-				<Box fontScale='micro' color='pure-white' pbe={4}>
-					{t('Free_Edition')}
-				</Box>
-			</Box>
-		</Box>
-	);
+        return null;
 };
diff --git a/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementAdminRoute.tsx b/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementAdminRoute.tsx
index 566a54a597..aba7168946 100644
--- a/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementAdminRoute.tsx
+++ b/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementAdminRoute.tsx
@@ -15,10 +15,10 @@ const DeviceManagementAdminRoute = (): ReactElement => {
 	const setModal = useSetModal();
 	const isModalOpen = useCurrentModal() !== null;
 
-	const hasDeviceManagement = useHasLicenseModule('device-management') as boolean;
+	const hasDeviceManagement = true as boolean;
 	const canViewDeviceManagement = usePermission('view-device-management');
 
-	const { shouldShowUpsell, cloudWorkspaceHadTrial, handleGoFullyFeatured, handleTalkToSales } = useUpsellActions(hasDeviceManagement);
+	const { shouldShowUpsell, cloudWorkspaceHadTrial, handleGoFullyFeatured, handleTalkToSales } = false;
 
 	useEffect(() => {
 		if (shouldShowUpsell) {
diff --git a/apps/meteor/ee/client/views/admin/engagementDashboard/EngagementDashboardRoute.tsx b/apps/meteor/ee/client/views/admin/engagementDashboard/EngagementDashboardRoute.tsx
index 130de0e391..0bf4fdce8e 100644
--- a/apps/meteor/ee/client/views/admin/engagementDashboard/EngagementDashboardRoute.tsx
+++ b/apps/meteor/ee/client/views/admin/engagementDashboard/EngagementDashboardRoute.tsx
@@ -23,9 +23,9 @@ const EngagementDashboardRoute = (): ReactElement | null => {
 	const { tab } = router.getRouteParameters();
 	const eventStats = useEndpointAction('POST', '/v1/statistics.telemetry');
 
-	const hasEngagementDashboard = useHasLicenseModule('engagement-dashboard') as boolean;
+	const hasEngagementDashboard = true as boolean;
 
-	const { shouldShowUpsell, cloudWorkspaceHadTrial, handleGoFullyFeatured, handleTalkToSales } = useUpsellActions(hasEngagementDashboard);
+	const { shouldShowUpsell, cloudWorkspaceHadTrial, handleGoFullyFeatured, handleTalkToSales } = false;
 
 	useEffect(() => {
 		if (shouldShowUpsell) {
diff --git a/apps/meteor/ee/server/NetworkBroker.ts b/apps/meteor/ee/server/NetworkBroker.ts
index cbfbb3875f..ec80a670f6 100644
--- a/apps/meteor/ee/server/NetworkBroker.ts
+++ b/apps/meteor/ee/server/NetworkBroker.ts
@@ -2,7 +2,7 @@ import { asyncLocalStorage } from '@rocket.chat/core-services';
 import type { IBroker, IBrokerNode, IServiceMetrics, IServiceClass, EventSignatures } from '@rocket.chat/core-services';
 import type { ServiceBroker, Context, ServiceSchema } from 'moleculer';
 
-import { EnterpriseCheck } from './lib/EnterpriseCheck';
+// import { EnterpriseCheck } from './lib/EnterpriseCheck';
 
 const events: { [k: string]: string } = {
 	onNodeConnected: '$node.connected',
@@ -103,7 +103,7 @@ export class NetworkBroker implements IBroker {
 		const service: ServiceSchema = {
 			name,
 			actions: {},
-			mixins: !instance.isInternal() ? [EnterpriseCheck] : [],
+//			mixins: !instance.isInternal() ? [EnterpriseCheck] : [],
 			...dependencies,
 			events: instanceEvents.reduce<Record<string, (ctx: Context) => void>>((map, { eventName }) => {
 				map[eventName] = /^\$/.test(eventName)
diff --git a/apps/meteor/ee/server/api/licenses.ts b/apps/meteor/ee/server/api/licenses.ts
index ab8d72164a..1813e76dc7 100644
--- a/apps/meteor/ee/server/api/licenses.ts
+++ b/apps/meteor/ee/server/api/licenses.ts
@@ -74,7 +74,7 @@ API.v1.addRoute(
 	{ authOrAnonRequired: true },
 	{
 		get() {
-			const isEnterpriseEdtion = isEnterprise();
+			const isEnterpriseEdtion = true;
 			return API.v1.success({ isEnterprise: isEnterpriseEdtion });
 		},
 	},
diff --git a/apps/meteor/ee/server/settings/deviceManagement.ts b/apps/meteor/ee/server/settings/deviceManagement.ts
index 133c0095a6..965f7ca8bb 100644
--- a/apps/meteor/ee/server/settings/deviceManagement.ts
+++ b/apps/meteor/ee/server/settings/deviceManagement.ts
@@ -4,7 +4,7 @@ export async function addSettings(): Promise<void> {
 	await settingsRegistry.addGroup('Device_Management', async function () {
 		await this.with(
 			{
-				enterprise: true,
+				enterprise: false,
 				modules: ['device-management'],
 			},
 			async function () {
diff --git a/apps/meteor/ee/server/settings/ldap.ts b/apps/meteor/ee/server/settings/ldap.ts
index 413499375b..7da48206e7 100644
--- a/apps/meteor/ee/server/settings/ldap.ts
+++ b/apps/meteor/ee/server/settings/ldap.ts
@@ -15,7 +15,7 @@ export function addSettings(): Promise<void> {
 		await this.with(
 			{
 				tab: 'LDAP_Enterprise',
-				enterprise: true,
+				enterprise: false,
 				modules: ['ldap-enterprise'],
 			},
 			async function () {
diff --git a/apps/meteor/ee/server/settings/saml.ts b/apps/meteor/ee/server/settings/saml.ts
index 50cb499af0..50a24b0d03 100644
--- a/apps/meteor/ee/server/settings/saml.ts
+++ b/apps/meteor/ee/server/settings/saml.ts
@@ -16,7 +16,7 @@ export const addSettings = async function (name: string): Promise<void> {
 		await this.with(
 			{
 				tab: 'SAML_Enterprise',
-				enterprise: true,
+				enterprise: false,
 				modules: ['saml-enterprise'],
 			},
 			async function () {
diff --git a/apps/meteor/ee/server/settings/video-conference.ts b/apps/meteor/ee/server/settings/video-conference.ts
index e32f34fb8d..00e9a4c1c1 100644
--- a/apps/meteor/ee/server/settings/video-conference.ts
+++ b/apps/meteor/ee/server/settings/video-conference.ts
@@ -4,7 +4,7 @@ export function addSettings(): Promise<void> {
 	return settingsRegistry.addGroup('Video_Conference', async function () {
 		await this.with(
 			{
-				enterprise: true,
+				enterprise: false,
 				modules: ['videoconference-enterprise'],
 			},
 			async function () {
diff --git a/apps/meteor/lib/upgradeTab.ts b/apps/meteor/lib/upgradeTab.ts
index 138a810fef..20c3938fea 100644
--- a/apps/meteor/lib/upgradeTab.ts
+++ b/apps/meteor/lib/upgradeTab.ts
@@ -15,22 +15,22 @@ export const getUpgradeTabType = ({
 	isTrial,
 	hadExpiredTrials,
 }: UpgradeTabConditions): UpgradeTabVariant | false => {
-	if (!hasValidLicense) {
-		if (hadExpiredTrials) {
-			return 'upgrade-your-plan';
-		}
-
-		if (registered) {
-			return 'go-fully-featured-registered';
-		}
-
-		return 'go-fully-featured';
-	}
-
-	if (isTrial) {
-		return 'trial-enterprise';
-	}
-
+//	if (hasValidLicense) {
+//		if (hadExpiredTrials) {
+//			return 'upgrade-your-plan';
+//		}
+//
+//		if (registered) {
+//			return 'go-fully-featured-registered';
+//		}
+//
+//		return 'go-fully-featured';
+//	}
+//
+//	if (isTrial) {
+//		return 'trial-enterprise';
+//	}
+//
 	return false;
 };
 
diff --git a/apps/meteor/server/settings/layout.ts b/apps/meteor/server/settings/layout.ts
index 58884e733b..1ba39e74aa 100644
--- a/apps/meteor/server/settings/layout.ts
+++ b/apps/meteor/server/settings/layout.ts
@@ -3,22 +3,22 @@ import { settingsRegistry } from '../../app/settings/server';
 export const createLayoutSettings = () =>
 	settingsRegistry.addGroup('Layout', async function () {
 		await this.section('Login', async function () {
-			await this.add('Layout_Login_Hide_Logo', false, {
+			await this.add('Layout_Login_Hide_Logo', true, {
 				type: 'boolean',
 				public: true,
-				enterprise: true,
+				enterprise: false,
 				invalidValue: false,
 			});
-			await this.add('Layout_Login_Hide_Title', false, {
+			await this.add('Layout_Login_Hide_Title', true, {
 				type: 'boolean',
 				public: true,
-				enterprise: true,
+				enterprise: false,
 				invalidValue: false,
 			});
-			await this.add('Layout_Login_Hide_Powered_By', false, {
+			await this.add('Layout_Login_Hide_Powered_By', true, {
 				type: 'boolean',
 				public: true,
-				enterprise: true,
+				enterprise: false,
 				invalidValue: false,
 			});
 			await this.add('Layout_Login_Template', 'horizontal-template', {
@@ -34,7 +34,7 @@ export const createLayoutSettings = () =>
 					},
 				],
 				public: true,
-				enterprise: true,
+				enterprise: false,
 				invalidValue: 'horizontal-template',
 			});
 			await this.add('Accounts_ShowFormLogin', true, {
@@ -83,7 +83,7 @@ export const createLayoutSettings = () =>
 				i18nDescription: 'Layout_Custom_Body_Only_Description',
 				type: 'boolean',
 				invalidValue: false,
-				enterprise: true,
+				enterprise: false,
 				public: true,
 				enableQuery: [
 					{
diff --git a/apps/meteor/server/settings/message.ts b/apps/meteor/server/settings/message.ts
index 17dd1f7b23..5cb6f0c952 100644
--- a/apps/meteor/server/settings/message.ts
+++ b/apps/meteor/server/settings/message.ts
@@ -50,16 +50,16 @@ export const createMessageSettings = () =>
 			});
 		});
 		await this.section('Read_Receipts', async function () {
-			await this.add('Message_Read_Receipt_Enabled', false, {
+			await this.add('Message_Read_Receipt_Enabled', true, {
 				type: 'boolean',
-				enterprise: true,
+				enterprise: false,
 				invalidValue: false,
 				modules: ['message-read-receipt'],
 				public: true,
 			});
-			await this.add('Message_Read_Receipt_Store_Users', false, {
+			await this.add('Message_Read_Receipt_Store_Users', true, {
 				type: 'boolean',
-				enterprise: true,
+				enterprise: false,
 				invalidValue: false,
 				modules: ['message-read-receipt'],
 				public: true,
diff --git a/apps/meteor/server/settings/push.ts b/apps/meteor/server/settings/push.ts
index 3fad17c288..00d4bca240 100644
--- a/apps/meteor/server/settings/push.ts
+++ b/apps/meteor/server/settings/push.ts
@@ -125,7 +125,7 @@ export const createPushSettings = () =>
 			});
 			await this.add('Push_request_content_from_server', true, {
 				type: 'boolean',
-				enterprise: true,
+				enterprise: false,
 				invalidValue: false,
 				modules: ['push-privacy'],
 			});
diff --git a/packages/core-typings/src/ISetting.ts b/packages/core-typings/src/ISetting.ts
index 0766d78298..fe4f8503ef 100644
--- a/packages/core-typings/src/ISetting.ts
+++ b/packages/core-typings/src/ISetting.ts
@@ -110,7 +110,7 @@ export interface ISettingGroup {
 }
 
 export interface ISettingEnterprise extends ISettingBase {
-	enterprise: true;
+	enterprise: false;
 	invalidValue: SettingValue;
 }
 
diff --git a/yarn.lock b/yarn.lock
index bd822ce11a..7f6c6475d0 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -8257,9 +8257,9 @@ __metadata:
     "@rocket.chat/icons": "*"
     "@rocket.chat/prettier-config": "*"
     "@rocket.chat/styled": "*"
-    "@rocket.chat/ui-contexts": 2.0.4
+    "@rocket.chat/ui-contexts": 2.0.5
     "@rocket.chat/ui-kit": "*"
-    "@rocket.chat/ui-video-conf": 2.0.4
+    "@rocket.chat/ui-video-conf": 2.0.5
     "@tanstack/react-query": "*"
     react: "*"
     react-dom: "*"
@@ -8341,14 +8341,14 @@ __metadata:
     ts-jest: ~29.0.5
     typescript: ~5.2.2
   peerDependencies:
-    "@rocket.chat/core-typings": 6.4.4
+    "@rocket.chat/core-typings": 6.4.5
     "@rocket.chat/css-in-js": "*"
     "@rocket.chat/fuselage": "*"
     "@rocket.chat/fuselage-tokens": "*"
     "@rocket.chat/message-parser": "*"
     "@rocket.chat/styled": "*"
-    "@rocket.chat/ui-client": 2.0.4
-    "@rocket.chat/ui-contexts": 2.0.4
+    "@rocket.chat/ui-client": 2.0.5
+    "@rocket.chat/ui-contexts": 2.0.5
     katex: "*"
     react: "*"
   languageName: unknown
@@ -9471,7 +9471,7 @@ __metadata:
     "@rocket.chat/fuselage": "*"
     "@rocket.chat/fuselage-hooks": "*"
     "@rocket.chat/icons": "*"
-    "@rocket.chat/ui-contexts": 2.0.4
+    "@rocket.chat/ui-contexts": 2.0.5
     react: ~17.0.2
   languageName: unknown
   linkType: soft
@@ -9623,7 +9623,7 @@ __metadata:
     "@rocket.chat/fuselage-hooks": "*"
     "@rocket.chat/icons": "*"
     "@rocket.chat/styled": "*"
-    "@rocket.chat/ui-contexts": 2.0.4
+    "@rocket.chat/ui-contexts": 2.0.5
     react: ^17.0.2
     react-dom: ^17.0.2
   languageName: unknown
@@ -9707,7 +9707,7 @@ __metadata:
     typescript: ~5.2.2
   peerDependencies:
     "@rocket.chat/layout": "*"
-    "@rocket.chat/ui-contexts": 2.0.4
+    "@rocket.chat/ui-contexts": 2.0.5
     "@tanstack/react-query": "*"
     react: "*"
     react-hook-form: "*"
