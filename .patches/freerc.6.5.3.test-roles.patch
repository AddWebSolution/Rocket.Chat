diff --git a/apps/meteor/app/lib/server/functions/addOAuthService.ts b/apps/meteor/app/lib/server/functions/addOAuthService.ts
index eb28c5a7e3..9d1ebdd904 100644
--- a/apps/meteor/app/lib/server/functions/addOAuthService.ts
+++ b/apps/meteor/app/lib/server/functions/addOAuthService.ts
@@ -170,7 +170,7 @@ export async function addOAuthService(name: string, values: { [k: string]: strin
 		group: 'OAuth',
 		section: `Custom OAuth: ${name}`,
 		i18nLabel: 'Accounts_OAuth_Custom_Roles_Claim',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: 'roles',
 		modules: ['oauth-enterprise'],
 	});
@@ -179,7 +179,7 @@ export async function addOAuthService(name: string, values: { [k: string]: strin
 		group: 'OAuth',
 		section: `Custom OAuth: ${name}`,
 		i18nLabel: 'Accounts_OAuth_Custom_Groups_Claim',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: 'groups',
 		modules: ['oauth-enterprise'],
 	});
@@ -196,7 +196,7 @@ export async function addOAuthService(name: string, values: { [k: string]: strin
 		group: 'OAuth',
 		section: `Custom OAuth: ${name}`,
 		i18nLabel: 'Accounts_OAuth_Custom_Map_Channels',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: false,
 		modules: ['oauth-enterprise'],
 	});
@@ -205,7 +205,7 @@ export async function addOAuthService(name: string, values: { [k: string]: strin
 		group: 'OAuth',
 		section: `Custom OAuth: ${name}`,
 		i18nLabel: 'Accounts_OAuth_Custom_Merge_Roles',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: false,
 		modules: ['oauth-enterprise'],
 	});
@@ -215,7 +215,7 @@ export async function addOAuthService(name: string, values: { [k: string]: strin
 		section: `Custom OAuth: ${name}`,
 		i18nLabel: 'Accounts_OAuth_Custom_Roles_To_Sync',
 		i18nDescription: 'Accounts_OAuth_Custom_Roles_To_Sync_Description',
-		enterprise: true,
+		enterprise: false,
 		enableQuery: {
 			_id: `Accounts_OAuth_Custom-${name}-merge_roles`,
 			value: true,
diff --git a/apps/meteor/client/components/PlanTag.tsx b/apps/meteor/client/components/PlanTag.tsx
index 189b9d1ed1..0fd49dc88f 100644
--- a/apps/meteor/client/components/PlanTag.tsx
+++ b/apps/meteor/client/components/PlanTag.tsx
@@ -18,7 +18,7 @@ function PlanTag() {
 		<>
 			{tags.map(({ name }) => (
 				<Box marginInline={4} display='inline-block' verticalAlign='middle' key={name}>
-					<Tag variant='primary'>{name}</Tag>
+					<Tag variant='primary'>Libre</Tag>
 				</Box>
 			))}
 		</>
diff --git a/apps/meteor/client/views/admin/workspace/UsersUploadsCard/UsersUploadsCard.tsx b/apps/meteor/client/views/admin/workspace/UsersUploadsCard/UsersUploadsCard.tsx
index eaf1079d5d..3dedd63f4f 100644
--- a/apps/meteor/client/views/admin/workspace/UsersUploadsCard/UsersUploadsCard.tsx
+++ b/apps/meteor/client/views/admin/workspace/UsersUploadsCard/UsersUploadsCard.tsx
@@ -24,7 +24,7 @@ const UsersUploadsCard = ({ statistics }: UsersUploadsCardProps): ReactElement =
 		router.navigate('/admin/engagement');
 	});
 
-	const canViewEngagement = useHasLicenseModule('engagement-dashboard');
+	const canViewEngagement = true;
 
 	return (
 		<Card>
diff --git a/apps/meteor/ee/app/canned-responses/server/settings.ts b/apps/meteor/ee/app/canned-responses/server/settings.ts
index 56eacee8c5..5e6b79c1f4 100644
--- a/apps/meteor/ee/app/canned-responses/server/settings.ts
+++ b/apps/meteor/ee/app/canned-responses/server/settings.ts
@@ -8,7 +8,7 @@ export const createSettings = async (): Promise<void> => {
 		section: 'Canned_Responses',
 		type: 'boolean',
 		public: true,
-		enterprise: true,
+		enterprise: false,
 		invalidValue: false,
 		modules: ['canned-responses'],
 		enableQuery: omnichannelEnabledQuery,
diff --git a/apps/meteor/ee/app/license/server/canEnableApp.ts b/apps/meteor/ee/app/license/server/canEnableApp.ts
index 72220e27ac..15a473f7e4 100644
--- a/apps/meteor/ee/app/license/server/canEnableApp.ts
+++ b/apps/meteor/ee/app/license/server/canEnableApp.ts
@@ -18,8 +18,8 @@ export const canEnableApp = async (app: IAppStorageItem): Promise<boolean> => {
 	const source = getInstallationSourceFromAppStorageItem(app);
 	switch (source) {
 		case 'private':
-			return !(await License.shouldPreventAction('privateApps'));
+			return true;
 		default:
-			return !(await License.shouldPreventAction('marketplaceApps'));
+			return true;
 	}
 };
diff --git a/apps/meteor/ee/app/livechat-enterprise/server/settings.ts b/apps/meteor/ee/app/livechat-enterprise/server/settings.ts
index 2863284d6c..edb5663278 100644
--- a/apps/meteor/ee/app/livechat-enterprise/server/settings.ts
+++ b/apps/meteor/ee/app/livechat-enterprise/server/settings.ts
@@ -16,7 +16,7 @@ export const createSettings = async (): Promise<void> => {
 			{ key: 'close', i18nLabel: 'Livechat_close_chat' },
 			{ key: 'on-hold', i18nLabel: 'Omnichannel_onHold_Chat' },
 		],
-		enterprise: true,
+		enterprise: false,
 		public: true,
 		invalidValue: 'none',
 		modules: ['livechat-enterprise'],
@@ -29,7 +29,7 @@ export const createSettings = async (): Promise<void> => {
 		section: 'Sessions',
 		i18nLabel: 'Livechat_abandoned_rooms_closed_custom_message',
 		enableQuery: [{ _id: 'Livechat_abandoned_rooms_action', value: 'close' }, omnichannelEnabledQuery],
-		enterprise: true,
+		enterprise: false,
 		invalidValue: '',
 		modules: ['livechat-enterprise'],
 	});
@@ -38,7 +38,7 @@ export const createSettings = async (): Promise<void> => {
 		type: 'boolean',
 		group: 'Omnichannel',
 		section: 'Routing',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: false,
 		modules: ['livechat-enterprise'],
 		enableQuery: omnichannelEnabledQuery,
@@ -60,7 +60,7 @@ export const createSettings = async (): Promise<void> => {
 				],
 				public: true,
 				i18nLabel: 'Livechat_business_hour_type',
-				enterprise: true,
+				enterprise: false,
 				invalidValue: 'Single',
 				modules: ['livechat-enterprise'],
 				enableQuery: [omnichannelEnabledQuery, businessHoursEnabled],
@@ -73,7 +73,7 @@ export const createSettings = async (): Promise<void> => {
 				group: 'Omnichannel',
 				section: 'Queue_management',
 				i18nLabel: 'Waiting_queue',
-				enterprise: true,
+				enterprise: false,
 				invalidValue: false,
 				modules: ['livechat-enterprise'],
 				enableQuery: omnichannelEnabledQuery,
@@ -86,7 +86,7 @@ export const createSettings = async (): Promise<void> => {
 				i18nLabel: 'Waiting_queue_message',
 				i18nDescription: 'Waiting_queue_message_description',
 				enableQuery: [{ _id: 'Livechat_waiting_queue', value: true }, omnichannelEnabledQuery],
-				enterprise: true,
+				enterprise: false,
 				invalidValue: '',
 				modules: ['livechat-enterprise'],
 			});
@@ -98,7 +98,7 @@ export const createSettings = async (): Promise<void> => {
 				i18nLabel: 'Max_number_of_chats_per_agent',
 				i18nDescription: 'Max_number_of_chats_per_agent_description',
 				enableQuery: [{ _id: 'Livechat_waiting_queue', value: true }, omnichannelEnabledQuery],
-				enterprise: true,
+				enterprise: false,
 				invalidValue: 0,
 				modules: ['livechat-enterprise'],
 			});
@@ -109,7 +109,7 @@ export const createSettings = async (): Promise<void> => {
 				section: 'Queue_management',
 				i18nLabel: 'Omnichannel_calculate_dispatch_service_queue_statistics',
 				enableQuery: [{ _id: 'Livechat_waiting_queue', value: true }, omnichannelEnabledQuery],
-				enterprise: true,
+				enterprise: false,
 				invalidValue: false,
 				modules: ['livechat-enterprise'],
 			});
@@ -121,7 +121,7 @@ export const createSettings = async (): Promise<void> => {
 				i18nLabel: 'Number_of_most_recent_chats_estimate_wait_time',
 				i18nDescription: 'Number_of_most_recent_chats_estimate_wait_time_description',
 				enableQuery: [{ _id: 'Livechat_waiting_queue', value: true }, omnichannelEnabledQuery],
-				enterprise: true,
+				enterprise: false,
 				invalidValue: 100,
 				modules: ['livechat-enterprise'],
 			});
@@ -133,7 +133,7 @@ export const createSettings = async (): Promise<void> => {
 				i18nLabel: 'Livechat_maximum_queue_wait_time',
 				enableQuery: omnichannelEnabledQuery,
 				i18nDescription: 'Livechat_maximum_queue_wait_time_description',
-				enterprise: true,
+				enterprise: false,
 				invalidValue: -1,
 				modules: ['livechat-enterprise'],
 			});
@@ -149,7 +149,7 @@ export const createSettings = async (): Promise<void> => {
 				section: 'Queue_management',
 				i18nLabel: 'Sorting_mechanism',
 				enableQuery: [omnichannelEnabledQuery],
-				enterprise: true,
+				enterprise: false,
 				public: true,
 				modules: ['livechat-enterprise'],
 				invalidValue: '',
@@ -161,7 +161,7 @@ export const createSettings = async (): Promise<void> => {
 		type: 'boolean',
 		group: 'Omnichannel',
 		section: 'Routing',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: false,
 		modules: ['livechat-enterprise'],
 		enableQuery: omnichannelEnabledQuery,
@@ -171,7 +171,7 @@ export const createSettings = async (): Promise<void> => {
 		type: 'int',
 		group: 'Omnichannel',
 		section: 'Sessions',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: 0,
 		modules: ['livechat-enterprise'],
 		enableQuery: omnichannelEnabledQuery,
@@ -182,7 +182,7 @@ export const createSettings = async (): Promise<void> => {
 		group: 'Omnichannel',
 		section: 'Sessions',
 		enableQuery: [{ _id: 'Livechat_auto_close_on_hold_chats_timeout', value: { $gte: 1 } }, omnichannelEnabledQuery],
-		enterprise: true,
+		enterprise: false,
 		invalidValue: '',
 		modules: ['livechat-enterprise'],
 	});
@@ -191,7 +191,7 @@ export const createSettings = async (): Promise<void> => {
 		type: 'boolean',
 		group: 'Omnichannel',
 		section: 'Sessions',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: false,
 		public: true,
 		modules: ['livechat-enterprise'],
@@ -214,7 +214,7 @@ export const createSettings = async (): Promise<void> => {
 		group: 'Omnichannel',
 		section: 'Sessions',
 		i18nDescription: 'Livechat_auto_transfer_chat_timeout_description',
-		enterprise: true,
+		enterprise: false,
 		invalidValue: 0,
 		modules: ['livechat-enterprise'],
 		enableQuery: omnichannelEnabledQuery,
diff --git a/apps/meteor/ee/client/sidebar/footer/SidebarFooterWatermark.tsx b/apps/meteor/ee/client/sidebar/footer/SidebarFooterWatermark.tsx
index 88b872ed46..d2f67e4a54 100644
--- a/apps/meteor/ee/client/sidebar/footer/SidebarFooterWatermark.tsx
+++ b/apps/meteor/ee/client/sidebar/footer/SidebarFooterWatermark.tsx
@@ -22,20 +22,6 @@ export const SidebarFooterWatermark = (): ReactElement | null => {
 
 	const license = response.data;
 
-	if (license.activeModules.includes('hide-watermark') && !license.trial) {
-		return null;
-	}
+	return null;
 
-	return (
-		<Box pi={16} pbe={8}>
-			<Box is='a' href='https://rocket.chat/' target='_blank' rel='noopener noreferrer'>
-				<Box fontScale='micro' color='hint' pbe={4}>
-					{t('Powered_by_RocketChat')}
-				</Box>
-				<Box fontScale='micro' color='pure-white' pbe={4}>
-					{licenseName.data}
-				</Box>
-			</Box>
-		</Box>
-	);
 };
diff --git a/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementAdminRoute.tsx b/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementAdminRoute.tsx
index 83e3b4eac7..7b52eca5ca 100644
--- a/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementAdminRoute.tsx
+++ b/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementAdminRoute.tsx
@@ -16,10 +16,10 @@ const DeviceManagementAdminRoute = (): ReactElement => {
 	const setModal = useSetModal();
 	const isModalOpen = useCurrentModal() !== null;
 
-	const hasDeviceManagement = useHasLicenseModule('device-management') as boolean;
+	const hasDeviceManagement = true;
 	const canViewDeviceManagement = usePermission('view-device-management');
 
-	const { shouldShowUpsell, handleManageSubscription } = useUpsellActions(hasDeviceManagement);
+	const { shouldShowUpsell, handleManageSubscription } = false;
 
 	useEffect(() => {
 		if (shouldShowUpsell) {
diff --git a/apps/meteor/ee/client/views/admin/engagementDashboard/EngagementDashboardRoute.tsx b/apps/meteor/ee/client/views/admin/engagementDashboard/EngagementDashboardRoute.tsx
index ece57a9e15..ce35d01763 100644
--- a/apps/meteor/ee/client/views/admin/engagementDashboard/EngagementDashboardRoute.tsx
+++ b/apps/meteor/ee/client/views/admin/engagementDashboard/EngagementDashboardRoute.tsx
@@ -26,7 +26,7 @@ const EngagementDashboardRoute = (): ReactElement | null => {
 
 	const hasEngagementDashboard = useHasLicenseModule('engagement-dashboard') as boolean;
 
-	const { shouldShowUpsell, handleManageSubscription } = useUpsellActions(hasEngagementDashboard);
+	const { shouldShowUpsell, handleManageSubscription } = false;
 
 	useEffect(() => {
 		if (shouldShowUpsell) {
diff --git a/apps/meteor/ee/server/NetworkBroker.ts b/apps/meteor/ee/server/NetworkBroker.ts
index cbfbb3875f..ec80a670f6 100644
--- a/apps/meteor/ee/server/NetworkBroker.ts
+++ b/apps/meteor/ee/server/NetworkBroker.ts
@@ -2,7 +2,7 @@ import { asyncLocalStorage } from '@rocket.chat/core-services';
 import type { IBroker, IBrokerNode, IServiceMetrics, IServiceClass, EventSignatures } from '@rocket.chat/core-services';
 import type { ServiceBroker, Context, ServiceSchema } from 'moleculer';
 
-import { EnterpriseCheck } from './lib/EnterpriseCheck';
+// import { EnterpriseCheck } from './lib/EnterpriseCheck';
 
 const events: { [k: string]: string } = {
 	onNodeConnected: '$node.connected',
@@ -103,7 +103,7 @@ export class NetworkBroker implements IBroker {
 		const service: ServiceSchema = {
 			name,
 			actions: {},
-			mixins: !instance.isInternal() ? [EnterpriseCheck] : [],
+//			mixins: !instance.isInternal() ? [EnterpriseCheck] : [],
 			...dependencies,
 			events: instanceEvents.reduce<Record<string, (ctx: Context) => void>>((map, { eventName }) => {
 				map[eventName] = /^\$/.test(eventName)
diff --git a/apps/meteor/ee/server/api/licenses.ts b/apps/meteor/ee/server/api/licenses.ts
index 3faac0a095..e9eb379222 100644
--- a/apps/meteor/ee/server/api/licenses.ts
+++ b/apps/meteor/ee/server/api/licenses.ts
@@ -71,7 +71,7 @@ API.v1.addRoute(
 	{ authRequired: true },
 	{
 		async get() {
-			const maxActiveUsers = License.getMaxActiveUsers();
+			const maxActiveUsers = 1000000;
 			const activeUsers = await Users.getActiveLocalUserCount();
 
 			return API.v1.success({ maxActiveUsers: maxActiveUsers > 0 ? maxActiveUsers : null, activeUsers });
@@ -86,7 +86,7 @@ API.v1.addRoute(
 		get() {
 			apiDeprecationLogger.endpoint(this.request.route, '7.0.0', this.response, ' Use licenses.info instead.');
 			const isEnterpriseEdition = License.hasValidLicense();
-			return API.v1.success({ isEnterprise: isEnterpriseEdition });
+			return true;
 		},
 	},
 );
diff --git a/apps/meteor/ee/server/api/roles.ts b/apps/meteor/ee/server/api/roles.ts
index 7a71613b35..3beb62fc7d 100644
--- a/apps/meteor/ee/server/api/roles.ts
+++ b/apps/meteor/ee/server/api/roles.ts
@@ -96,9 +96,9 @@ API.v1.addRoute(
 	{ authRequired: true },
 	{
 		async post() {
-			if (!License.hasModule('custom-roles')) {
-				throw new Meteor.Error('error-action-not-allowed', 'This is an enterprise feature');
-			}
+//			if (!License.hasModule('custom-roles')) {
+//				throw new Meteor.Error('error-action-not-allowed', 'This is an enterprise feature');
+//			}
 
 			if (!isRoleCreateProps(this.bodyParams)) {
 				throw new Meteor.Error('error-invalid-role-properties', 'The role properties are invalid.');
@@ -154,9 +154,9 @@ API.v1.addRoute(
 
 			const role = await Roles.findOne(roleId);
 
-			if (!License.hasModule('custom-roles') && !role?.protected) {
-				throw new Meteor.Error('error-action-not-allowed', 'This is an enterprise feature');
-			}
+//			if (!License.hasModule('custom-roles') && !role?.protected) {
+//				throw new Meteor.Error('error-action-not-allowed', 'This is an enterprise feature');
+//			}
 
 			const roleData = {
 				description: description || '',
diff --git a/apps/meteor/ee/server/settings/deviceManagement.ts b/apps/meteor/ee/server/settings/deviceManagement.ts
index 133c0095a6..965f7ca8bb 100644
--- a/apps/meteor/ee/server/settings/deviceManagement.ts
+++ b/apps/meteor/ee/server/settings/deviceManagement.ts
@@ -4,7 +4,7 @@ export async function addSettings(): Promise<void> {
 	await settingsRegistry.addGroup('Device_Management', async function () {
 		await this.with(
 			{
-				enterprise: true,
+				enterprise: false,
 				modules: ['device-management'],
 			},
 			async function () {
diff --git a/apps/meteor/ee/server/settings/ldap.ts b/apps/meteor/ee/server/settings/ldap.ts
index 413499375b..7da48206e7 100644
--- a/apps/meteor/ee/server/settings/ldap.ts
+++ b/apps/meteor/ee/server/settings/ldap.ts
@@ -15,7 +15,7 @@ export function addSettings(): Promise<void> {
 		await this.with(
 			{
 				tab: 'LDAP_Enterprise',
-				enterprise: true,
+				enterprise: false,
 				modules: ['ldap-enterprise'],
 			},
 			async function () {
diff --git a/apps/meteor/ee/server/settings/saml.ts b/apps/meteor/ee/server/settings/saml.ts
index 50cb499af0..50a24b0d03 100644
--- a/apps/meteor/ee/server/settings/saml.ts
+++ b/apps/meteor/ee/server/settings/saml.ts
@@ -16,7 +16,7 @@ export const addSettings = async function (name: string): Promise<void> {
 		await this.with(
 			{
 				tab: 'SAML_Enterprise',
-				enterprise: true,
+				enterprise: false,
 				modules: ['saml-enterprise'],
 			},
 			async function () {
diff --git a/apps/meteor/ee/server/settings/video-conference.ts b/apps/meteor/ee/server/settings/video-conference.ts
index e32f34fb8d..00e9a4c1c1 100644
--- a/apps/meteor/ee/server/settings/video-conference.ts
+++ b/apps/meteor/ee/server/settings/video-conference.ts
@@ -4,7 +4,7 @@ export function addSettings(): Promise<void> {
 	return settingsRegistry.addGroup('Video_Conference', async function () {
 		await this.with(
 			{
-				enterprise: true,
+				enterprise: false,
 				modules: ['videoconference-enterprise'],
 			},
 			async function () {
diff --git a/apps/meteor/server/settings/layout.ts b/apps/meteor/server/settings/layout.ts
index 58884e733b..1ba39e74aa 100644
--- a/apps/meteor/server/settings/layout.ts
+++ b/apps/meteor/server/settings/layout.ts
@@ -3,22 +3,22 @@ import { settingsRegistry } from '../../app/settings/server';
 export const createLayoutSettings = () =>
 	settingsRegistry.addGroup('Layout', async function () {
 		await this.section('Login', async function () {
-			await this.add('Layout_Login_Hide_Logo', false, {
+			await this.add('Layout_Login_Hide_Logo', true, {
 				type: 'boolean',
 				public: true,
-				enterprise: true,
+				enterprise: false,
 				invalidValue: false,
 			});
-			await this.add('Layout_Login_Hide_Title', false, {
+			await this.add('Layout_Login_Hide_Title', true, {
 				type: 'boolean',
 				public: true,
-				enterprise: true,
+				enterprise: false,
 				invalidValue: false,
 			});
-			await this.add('Layout_Login_Hide_Powered_By', false, {
+			await this.add('Layout_Login_Hide_Powered_By', true, {
 				type: 'boolean',
 				public: true,
-				enterprise: true,
+				enterprise: false,
 				invalidValue: false,
 			});
 			await this.add('Layout_Login_Template', 'horizontal-template', {
@@ -34,7 +34,7 @@ export const createLayoutSettings = () =>
 					},
 				],
 				public: true,
-				enterprise: true,
+				enterprise: false,
 				invalidValue: 'horizontal-template',
 			});
 			await this.add('Accounts_ShowFormLogin', true, {
@@ -83,7 +83,7 @@ export const createLayoutSettings = () =>
 				i18nDescription: 'Layout_Custom_Body_Only_Description',
 				type: 'boolean',
 				invalidValue: false,
-				enterprise: true,
+				enterprise: false,
 				public: true,
 				enableQuery: [
 					{
diff --git a/apps/meteor/server/settings/message.ts b/apps/meteor/server/settings/message.ts
index e831895790..e62fc2d3b1 100644
--- a/apps/meteor/server/settings/message.ts
+++ b/apps/meteor/server/settings/message.ts
@@ -50,16 +50,16 @@ export const createMessageSettings = () =>
 			});
 		});
 		await this.section('Read_Receipts', async function () {
-			await this.add('Message_Read_Receipt_Enabled', false, {
+			await this.add('Message_Read_Receipt_Enabled', true, {
 				type: 'boolean',
-				enterprise: true,
+				enterprise: false,
 				invalidValue: false,
 				modules: ['message-read-receipt'],
 				public: true,
 			});
-			await this.add('Message_Read_Receipt_Store_Users', false, {
+			await this.add('Message_Read_Receipt_Store_Users', true, {
 				type: 'boolean',
-				enterprise: true,
+				enterprise: false,
 				invalidValue: false,
 				modules: ['message-read-receipt'],
 				public: true,
diff --git a/apps/meteor/server/settings/push.ts b/apps/meteor/server/settings/push.ts
index 3fad17c288..00d4bca240 100644
--- a/apps/meteor/server/settings/push.ts
+++ b/apps/meteor/server/settings/push.ts
@@ -125,7 +125,7 @@ export const createPushSettings = () =>
 			});
 			await this.add('Push_request_content_from_server', true, {
 				type: 'boolean',
-				enterprise: true,
+				enterprise: false,
 				invalidValue: false,
 				modules: ['push-privacy'],
 			});
diff --git a/ee/packages/license/src/deprecated.ts b/ee/packages/license/src/deprecated.ts
index e4d7bd2229..87d0a3ce43 100644
--- a/ee/packages/license/src/deprecated.ts
+++ b/ee/packages/license/src/deprecated.ts
@@ -11,7 +11,7 @@ export const getLicenseLimit = (license: ILicenseV3 | undefined, kind: LicenseLi
 		return -1;
 	}
 
-	return Math.min(...limitList.map(({ max }) => max));
+	return -1;
 };
 
 // #TODO: Remove references to those functions
diff --git a/packages/core-typings/src/ISetting.ts b/packages/core-typings/src/ISetting.ts
index 7b3aaa5cf2..abf3d0462d 100644
--- a/packages/core-typings/src/ISetting.ts
+++ b/packages/core-typings/src/ISetting.ts
@@ -110,7 +110,7 @@ export interface ISettingGroup {
 }
 
 export interface ISettingEnterprise extends ISettingBase {
-	enterprise: true;
+	enterprise: false;
 	invalidValue: SettingValue;
 }
 
diff --git a/yarn.lock b/yarn.lock
index 4f42755cc4..df3421ef90 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -8217,9 +8217,9 @@ __metadata:
     "@rocket.chat/icons": "*"
     "@rocket.chat/prettier-config": "*"
     "@rocket.chat/styled": "*"
-    "@rocket.chat/ui-contexts": 3.0.2
+    "@rocket.chat/ui-contexts": 3.0.3
     "@rocket.chat/ui-kit": "*"
-    "@rocket.chat/ui-video-conf": 3.0.2
+    "@rocket.chat/ui-video-conf": 3.0.3
     "@tanstack/react-query": "*"
     react: "*"
     react-dom: "*"
@@ -8301,14 +8301,14 @@ __metadata:
     ts-jest: ~29.0.5
     typescript: ~5.2.2
   peerDependencies:
-    "@rocket.chat/core-typings": 6.5.2
+    "@rocket.chat/core-typings": 6.5.3
     "@rocket.chat/css-in-js": "*"
     "@rocket.chat/fuselage": "*"
     "@rocket.chat/fuselage-tokens": "*"
     "@rocket.chat/message-parser": "*"
     "@rocket.chat/styled": "*"
-    "@rocket.chat/ui-client": 3.0.2
-    "@rocket.chat/ui-contexts": 3.0.2
+    "@rocket.chat/ui-client": 3.0.3
+    "@rocket.chat/ui-contexts": 3.0.3
     katex: "*"
     react: "*"
   languageName: unknown
@@ -9469,7 +9469,7 @@ __metadata:
     "@rocket.chat/fuselage": "*"
     "@rocket.chat/fuselage-hooks": "*"
     "@rocket.chat/icons": "*"
-    "@rocket.chat/ui-contexts": 3.0.2
+    "@rocket.chat/ui-contexts": 3.0.3
     react: ~17.0.2
   languageName: unknown
   linkType: soft
@@ -9622,7 +9622,7 @@ __metadata:
     "@rocket.chat/fuselage-hooks": "*"
     "@rocket.chat/icons": "*"
     "@rocket.chat/styled": "*"
-    "@rocket.chat/ui-contexts": 3.0.2
+    "@rocket.chat/ui-contexts": 3.0.3
     react: ^17.0.2
     react-dom: ^17.0.2
   languageName: unknown
@@ -9708,7 +9708,7 @@ __metadata:
   peerDependencies:
     "@rocket.chat/layout": "*"
     "@rocket.chat/tools": "*"
-    "@rocket.chat/ui-contexts": 3.0.2
+    "@rocket.chat/ui-contexts": 3.0.3
     "@tanstack/react-query": "*"
     react: "*"
     react-hook-form: "*"
